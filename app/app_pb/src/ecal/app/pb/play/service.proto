/* ========================= eCAL LICENSE =================================
 *
 * Copyright (C) 2016 - 2019 Continental Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ========================= eCAL LICENSE =================================
*/

syntax = "proto3";

import "ecal/app/pb/play/state.proto";

option cc_generic_services = true;

package eCAL.pb.play;

///////////////////////////////////////////////////////
// EcalPlayService Service
///////////////////////////////////////////////////////

enum eServiceResult                      // player command result
{
  none    = 0;                           // undefined result
  success = 1;                           // service succeeded
  failed  = 2;                           // service failed
}

message Configuration
{
  map<string, string>      items  =  1;  // configuration map keys / values ..
                                         // measurement_path                [string] Current measurement path (or empty string if no measurement is loaded)
                                         // limit_play_speed                [bool]   Whether the playback is limited to the play_speed value (if false, the player publishes all frames as fast as possible)
                                         // play_speed                      [float]  Play speed factor (1.0 indicates realtime playback)
                                         // frame_dropping_allowed          [bool]   Whether the player will drop frames instead of slowing down the playback
                                         // enforce_delay_accuracy          [bool]   Whether the player tries to always keep the correct amount of time between two frames, even if this may slow down the measurement
                                         // repeat                          [bool]   Repeat playback from the beginning if the end has been reached
                                         // limit_interval_start_rel_secs   [float]  Start the playback from this time (relative value in seconds, 0.0 indicates the begin of the measurement)
                                         // limit_interval_end_rel_secs     [float]  End the playback at this time (relative value in seconds)
}

message GetConfigRequest
{
}

message GetConfigResponse
{
  Configuration            config =  1;  // the current configuration

  eServiceResult           result =  2;  // service call result
  string                   error  =  3;  // human readable error message
}

message SetConfigRequest
{
  Configuration            config =  1;  // the configuration to set
}

message CommandRequest                   // Request for sending a command to the player
{
  enum eCommand                          // Player command
  {
    none          = 0;                    // Undefined command (do nothing)
    initialize    = 1;                    // Connect to eCAL (create publishers)
    de_initialize = 2;                    // Disconnect from eCAL (remove all publishers)
    jump_to       = 3;                    // jump to the rel_time_secs
    play          = 4;                    // Start playback
    pause         = 5;                    // Pause playback
    step          = 6;                    // Step 1 frame
    step_channel  = 7;                    // Step the given channel
    exit          = 8;                    // Close the player
  }
  eCommand                 command                =  1; // command for the player
  map<string, string>      channel_mapping        =  2; // channel mapping (source_name -> target_name) for initialize. If empty, all channels are initialized with their default name
  string                   step_reference_channel =  3; // channel for step_channel (source channel, i.e. unaffected by the channel mapping)
  float                    rel_time_secs          =  4; // relative time for jump_to
}

message Response                         // common player service response
{
  eServiceResult           result =  1;  // service call result
  string                   error  =  2;  // human readable error message
}

message Empty {}

service EcalPlayService
{
  rpc GetConfig  (GetConfigRequest) returns (GetConfigResponse);  // get current configuration
  rpc SetConfig  (SetConfigRequest) returns (Response);           // set configuration
  rpc SetCommand (CommandRequest)   returns (Response);           // set recorder command
  rpc GetState (Empty) returns (State);           // set current playback status
}

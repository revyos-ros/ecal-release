/* ========================= eCAL LICENSE =================================
 *
 * Copyright (C) 2016 - 2019 Continental Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ========================= eCAL LICENSE =================================
*/

syntax = "proto3";

package eCAL.pb.mma;

message Disk
{
  string            name                      =  1;
  double            read                      =  2;  //  bytes per second
  double            write                     =  3;  //  bytes per second
  uint64            available                 =  4;  //  bytes
  uint64            capacity                  =  5;  //  bytes
}

message Network
{
  string            name                      =  1;  //  network adapter name
  double            send                      =  2;  //  bytes per second
  double            receive                   =  3;  //  bytes per second
  string            ip_address                =  4;
}

message Memory
{
  uint64            total                     =  1;  //  bytes
  uint64            available                 =  2;  //  bytes
}

message Temperature
{
  float             cpu                       =  1;  //  centigrade
}

message ProcessesMemory
{
  uint64            current_working_set_size  =  1;  // The current used memory in bytes
  uint64            peak_working_set_size     =  2;  // The peak memory used in bytes
}

message ProcessesCPU
{
  uint64 cpu_kernel_time     = 1; // total cpu time in kernel mode     100-nanosecond time units
  uint64 cpu_user_time       = 2; // total cpu time in user mode       100-nanosecond time units
  uint64 cpu_creation_time   = 3; // creation time                     100-nanosecond time units
  float  cpu_load            = 4; // fixed point xx.yy%
}

message Process
{
  string            name        = 1;    //  name of the process
  uint32            id          = 2;
  string            commandline = 3;
  ProcessesMemory   memory      = 4;    // in Linux in will be only current_working_set_size
  ProcessesCPU      cpu         = 5;    // in Linux it will be only cpu_load
  bool              debug_flag  = 6;
  string            user        = 7;
}

message State
{
  double                cpu_load            = 1;
  Memory                memory              = 2;
  repeated Disk         disks               = 3;
  repeated Network      networks            = 4;
  Temperature           temperature         = 5;
  repeated Process      process             = 6;
  uint32                number_of_cpu_cores = 7;
  string                operating_system    = 8;
}
